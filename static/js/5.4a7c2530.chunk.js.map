{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect..tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","className","s","dialog","to","id","avatar","src","alt","name","Message","message","messageContent","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","messageElements","messages","m","dialogsItems","AddMessageFormRedux","onSubmit","values","sendMessage","newMessageBody","maxLength","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","placeholder","validate","required","mapStateToPropsForRedirect","isAuth","auth","compose","connect","dispatch","sendMessageCreator","Component","RedirectComponent","this","restProps","React"],"mappings":"yFACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,4B,oBCA9ID,EAAOC,QAAU,CAAC,QAAU,4BAA4B,aAAe,iCAAiC,OAAS,2BAA2B,OAAS,6B,oBCArJD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,wBAAwB,eAAiB,kC,wHCexFC,EAPI,SAACC,GAChB,OAAO,qBAAKC,UAAS,UAAKC,IAAEC,QAArB,SACC,eAAC,IAAD,CAASC,GAAE,kBAAaJ,EAAMK,IAA9B,UAAoC,qBAAKJ,UAAWC,IAAEI,OAAQC,IAAKP,EAAMM,OAAQE,IAAKR,EAAMS,OAAQT,EAAMS,W,kBCUvGC,EAVC,SAACV,GACb,OACI,qBAAKC,UAAWC,IAAES,QAAlB,SACI,sBAAKV,UAAWC,IAAEU,eAAlB,UACI,qBAAKX,UAAWC,IAAEI,OAAQC,IAAKP,EAAMM,SAAS,+BAAON,EAAMW,gB,mCCkB5DE,EAxBC,SAACb,GACb,IAAIc,EAAQd,EAAMe,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAACC,GAAD,OAA4B,cAAC,EAAD,CAAYV,KAAMU,EAAEV,KAAMJ,GAAIc,EAAEd,GACdC,OAAQa,EAAEb,YAC5Fc,EAAkBN,EAAMO,SAASH,KAAI,SAACI,GAAD,OAAyB,cAAC,EAAD,CAASjB,GAAIiB,EAAEjB,GAAIM,QAASW,EAAEX,QACfL,OAAQgB,EAAEhB,YAK3F,OACI,sBAAKL,UAAWC,IAAEe,QAAlB,UACI,qBAAKhB,UAAWC,IAAEqB,aAAlB,SACKP,IAEL,sBAAKf,UAAWC,IAAEmB,SAAlB,UACI,8BAAMD,IACN,cAACI,EAAD,CAAqBC,SAXX,SAACC,GACnB1B,EAAM2B,YAAYD,EAAOE,0BAkB3BC,EAAYC,YAAiB,IAY7BN,EAAsBO,YAAU,CAClCC,KAAM,yBADkBD,EAXuB,SAAC/B,GAChD,OAAO,uBAAMyB,SAAUzB,EAAMiC,aAAtB,UACH,cAACC,EAAA,EAAD,CAAOC,UAAWC,IACX3B,KAAO,iBACP4B,YAAa,qBACbC,SAAU,CAACC,IAAUV,KAEhC,gD,4EClCEW,EAA6B,SAAC1B,GAAD,MAA6C,CAC5E2B,OAAQ3B,EAAM4B,KAAKD,SCoBRE,sBACXC,aAnBkB,SAAC9B,GACnB,MAAO,CACLC,YAAaD,EAAMC,gBAQA,SAAC8B,GACtB,MAAO,CACHlB,YAAa,SAACC,GACViB,EAASC,YAAmBlB,UDZjC,SAA+BmB,GAA8B,IAC1DC,EADyD,4JAE3D,WAAW,IAAD,EACuBC,KAAKjD,MAAlBkD,GADV,EACDT,OADC,2BAEF,OAAKQ,KAAKjD,MAAMyC,OACT,cAACM,EAAD,eAAeG,IADS,cAAC,IAAD,CAAU9C,GAAI,eAJM,GAC/B+C,IAAMJ,WAStC,OADmCH,YAASJ,EAATI,CAAqCI,KCQ7DL,CAGb9B","file":"static/js/5.4a7c2530.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3GU_E\",\"dialogsItems\":\"Dialogs_dialogsItems__3ANzm\",\"active\":\"Dialogs_active__3SGkw\",\"messages\":\"Dialogs_messages__3MbI8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"DialogItem_dialogs__2Y3ZJ\",\"dialogsItems\":\"DialogItem_dialogsItems__icMuR\",\"active\":\"DialogItem_active__2-dp1\",\"avatar\":\"DialogItem_avatar__2AOXY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__1keDf\",\"avatar\":\"Message_avatar__36lAY\",\"messageContent\":\"Message_messageContent__nO3cY\"};","import React from \"react\";\r\nimport s from './DialogItem.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type DialogItemPropsType = {\r\n    name: string,\r\n    id: number,\r\n    avatar: string,\r\n}\r\nconst DialogItem = (props: DialogItemPropsType) => {\r\n    return <div className={`${s.dialog}`}>\r\n            <NavLink to={`dialogs/${props.id}`}><img className={s.avatar} src={props.avatar} alt={props.name}/>{props.name}</NavLink>\r\n        </div>\r\n}\r\n\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from './Message.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nexport type MessagePropsType = {\r\n    id: number,\r\n    message: string,\r\n    avatar: string,\r\n}\r\n\r\nconst Message = (props: MessagePropsType) => {\r\n    return (\r\n        <div className={s.message}>\r\n            <div className={s.messageContent}>\r\n                <img className={s.avatar} src={props.avatar}/><span>{props.message}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem, {DialogItemPropsType} from \"./DialogItem/DialogItem\"\r\nimport Message, {MessagePropsType} from \"./Message/Message\"\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/formControls/FormControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n    let state = props.dialogsPage\r\n\r\n    let dialogsElements = state.dialogs.map((d: DialogItemPropsType) => <DialogItem name={d.name} id={d.id}\r\n                                                                                          avatar={d.avatar}/>)\r\n    let messageElements = state.messages.map((m: MessagePropsType) => <Message id={m.id} message={m.message}\r\n                                                                                     avatar={m.avatar}/>)\r\n    const addNewMessage = (values: any) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messageElements}</div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Dialogs;\r\n\r\nconst maxLength = maxLengthCreator(50)\r\nconst AddMessageForm:React.FC<InjectedFormProps> = (props)=> {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <Field component={Textarea}\r\n               name ={\"newMessageBody\"}\r\n               placeholder={\"Enter your message\"}\r\n               validate={[required, maxLength]}\r\n        />\r\n    <button >Send</button>\r\n    </form>\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({\r\n    form: \"DialogsAddMessageForm\"\r\n}) (AddMessageForm)","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../Redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect  <T>(Component: ComponentType<T>) {\r\n    class RedirectComponent extends React.Component<MapStatePropsType, MapStatePropsType> {\r\n        render () {\r\n            let {isAuth, ...restProps} = this.props\r\n                if (!this.props.isAuth) return <Redirect to={'/login'} />\r\n                return <Component {...restProps as T} />\r\n        }\r\n    }\r\n\r\n    const ConnectedRedirectComponent = connect (mapStateToPropsForRedirect)(RedirectComponent);\r\n    return ConnectedRedirectComponent;\r\n}","import React, {ComponentType} from \"react\";\r\nimport {DialogsReducerType, sendMessageCreator} from \"../../Redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect.\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage: DialogsReducerType\r\n}\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n      dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\ntype mapDispatchToPropsType = {\r\n    sendMessage: (newMessageBody: string)=> void\r\n}\r\nexport type DialogsPropsType = mapDispatchToPropsType & MapStatePropsType\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch):mapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: (newMessageBody: string)=>{\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)"],"sourceRoot":""}
{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/ProfileInfo/ProfileStatusWidthHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","Paragraph","Typography","ProfileStatusWidthHooks","React","memo","props","dispatch","useDispatch","myId","useSelector","state","auth","userId","profilePage","profile","isMyStatus","toString","status","useState","newStatus","setNewStatus","useEffect","updateStatus","strong","editable","style","fontSize","width","onChange","ProfileDataReduxForm","reduxForm","form","onSubmit","handleSubmit","onClick","error","className","s","formSummaryError","Field","name","component","Input","type","Object","keys","initialValues","contacts","map","key","Panel","Collapse","ProfileData","isOwner","goToEditMode","header","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","contact","ProfileInfo","editMode","setEditMode","Preloader","descriptionBlock","level","fullName","src","photos","large","userPhoto","e","target","files","savePhoto","formData","saveProfile","then","Post","likesCount","likes","setLikes","dislikes","setDislikes","action","setAction","actions","title","createElement","LikeFilled","LikeOutlined","DislikeFilled","DislikeOutlined","author","avatar","image","alt","content","message","datetime","moment","format","fromNow","MyPosts","postsElement","posts","p","id","postsBlock","PostFormRedux","values","addPost","newPostBody","maxLength10","maxLengthCreator","Textarea","placeholder","validate","required","MyPostsContainer","connect","addPostActionCreator","Profile","ProfileContainer","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","Component","compose","isAuth","withRouter"],"mappings":"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","file":"static/js/6.6e3885d0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2HLL7\",\"contact\":\"ProfileInfo_contact__2kVKb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__bD3bY\",\"posts\":\"MyPosts_posts__tuMtb\"};","import React, {useEffect, useState} from \"react\";\r\nimport { Typography } from 'antd';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../Redux/redux-store\";\r\nimport {updateStatus} from \"../../../Redux/profile-reducer\";\r\nconst { Paragraph } = Typography;\r\n\r\n\r\ntype ProfileStatusProps = {\r\n    status: string\r\n    updateStatus: (status: string)=> void\r\n}\r\n\r\nexport const ProfileStatusWidthHooks  = React.memo((props: ProfileStatusProps) => {\r\n    const dispatch = useDispatch()\r\n    const myId = useSelector<AppStateType, string|null>(state => state.auth.userId)\r\n    const userId = useSelector<AppStateType, number|undefined>( state=> state.profilePage.profile?.userId)\r\n    const isMyStatus = (myId == userId?.toString())\r\n    const status = useSelector<AppStateType, string>(state => state.profilePage.status)\r\n\r\n    const [newStatus, setNewStatus] = useState<string>(status)\r\n\r\n    useEffect(()=>{\r\n        isMyStatus && dispatch(updateStatus(newStatus))\r\n    }, [newStatus])\r\n\r\n\r\n    return <>\r\n        { !isMyStatus && <Paragraph strong editable={false} style={{fontSize: 20, width: 250}}>{status}</Paragraph>}\r\n        { isMyStatus && <Paragraph strong editable={{ onChange: setNewStatus }} style={{fontSize: 20, width: 250}}>{status}</Paragraph>}\r\n    </>\r\n})","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../../common/formControls/FormControls\";\r\nimport s from \"../../common/formControls/FormControls.module.css\";\r\nimport {Button} from \"antd\";\r\n\r\n\r\ntype ProfileDataType =  {\r\n    aboutMe: string;\r\n    contacts : {\r\n        facebook: string | null,\r\n        website: string | null,\r\n        vk: string | null,\r\n        twitter: string | null,\r\n        instagram: string | null,\r\n        youtube: string | null,\r\n        mainLink: string | null,\r\n        github: string | null,\r\n    },\r\n    fullName: string,\r\n    lookingForAJob: boolean,\r\n    photos: {\r\n        small: string,\r\n        large: string\r\n    }\r\n    userId: number\r\n    lookingForAJobDescription: string\r\n}\r\n\r\nexport const ProfileDataForm : React.FC<InjectedFormProps<ProfileDataType>> = (props)=> {\r\n\r\n    return  <form onSubmit={props.handleSubmit}>\r\n           <div> <button onClick={()=> {}}>Save</button></div>\r\n        { props.error && <div className={s.formSummaryError}>\r\n            {props.error}\r\n        </div> }\r\n        <div> <b>About me</b> <Field name={\"aboutMe\"} component={Input}/></div>\r\n        <div><b>Full name: </b> <Field name={\"fullName\"} component={Input}/></div>\r\n        <div>\r\n            <div>\r\n                <b>Looking for a job</b> : <Field type=\"checkbox\" name={\"lookingForAJob\"} component={Input}/>\r\n            </div>\r\n            <div><b> My professional skills </b> <Field type=\"text\" name={\"lookingForAJobDescription\"} component={Input}/></div>\r\n\r\n            <div>\r\n\r\n                <b>Contacts: </b> {\r\n                // @ts-ignore\r\n                Object.keys(props.initialValues.contacts).map((key) => {\r\n                return <div key={key}>\r\n                    <b>{key}</b> <Field name={`contacts.${key}`} component={Input}/>\r\n                </div>\r\n            })}\r\n            </div>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nexport const ProfileDataReduxForm = reduxForm<ProfileDataType>({\r\n    form: \"profileData\"\r\n}) (ProfileDataForm)","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport {Preloader} from \"../../common/preloader/Preloader\";\r\nimport {ProfilePropsType} from \"../ProfileContainer\";\r\nimport {ProfileStatusWidthHooks} from \"./ProfileStatusWidthHooks\";\r\nimport userPhoto from \"../../../Assets/Images/avatar.png\"\r\nimport {ProfileDataReduxForm} from \"./ProfileDataForm\";\r\nimport {Button, Collapse, Image, Input} from \"antd\";\r\nimport Title from \"antd/lib/typography/Title\";\r\n\r\nconst { Panel } = Collapse;\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfilePropsType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: any\r\n    saveProfile: any\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoPropsType) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files !== null) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    const onSubmit = (formData: any) => {\r\n        props.saveProfile(formData).then(\r\n            ()=> {\r\n                setEditMode(false)\r\n            }\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <Title level={2}>{props.profile.fullName}</Title>\r\n                <Image src={props.profile.photos.large || userPhoto}/>\r\n                {props.isOwner && <Input type={\"file\"} onChange={onMainPhotoSelected} style={{ width: 250 }}/>}\r\n                {editMode\r\n                    ? <ProfileDataReduxForm initialValues={props.profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData profile={props.profile} status={props.status} updateStatus={props.updateStatus}\r\n                                   isOwner={props.isOwner}\r\n                                   goToEditMode={() => {\r\n                                       setEditMode(true)\r\n                                   }}\r\n                    />}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    goToEditMode: () => void\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    profile: ProfilePropsType\r\n}\r\nconst ProfileData = (props: ProfileDataPropsType) => {\r\n    return (\r\n        <>\r\n            <ProfileStatusWidthHooks status={props.status} updateStatus={props.updateStatus}/>\r\n            {props.isOwner && <div>\r\n                <Button onClick={props.goToEditMode}>Edit</Button>\r\n            </div>}\r\n            <Collapse style={{width: 300}}>\r\n                <Panel header=\"About me\" key=\"1\">\r\n                    <div>\r\n                        <b>Looking for a job</b> : {props.profile.lookingForAJob ? \"yes\" : \"no\"}\r\n                    </div>\r\n                    {props.profile.lookingForAJob &&\r\n                    <div><b> My professional skills </b>{props.profile.lookingForAJobDescription}</div>\r\n                    }\r\n                    <span>{props.profile.aboutMe}</span>\r\n                </Panel>\r\n\r\n                <Panel header=\"Contacts\" key=\"2\">\r\n                    {Object.keys(props.profile.contacts).map((key) => {\r\n                        // @ts-ignore\r\n                        return <Contact key={key} contactTitle={key} contactValue={props.profile.contacts[key]}/>\r\n                    })}\r\n                </Panel>\r\n            </Collapse>\r\n        </>\r\n    )\r\n}\r\n\r\nexport const Contact: React.FC<ContactPropsType> = ({contactTitle, contactValue}) => {\r\n    return <div className={s.contact}><b>{contactTitle}: </b> {contactValue}</div>\r\n}\r\ntype ContactPropsType = {\r\n    contactTitle: string,\r\n    contactValue: string | null\r\n}\r\nexport default ProfileInfo;","import React, {createElement, useState} from \"react\";\r\nimport s from './Post.module.css';\r\nimport {Comment, Tooltip, Avatar} from 'antd';\r\nimport moment from 'moment';\r\nimport {DislikeOutlined, LikeOutlined, DislikeFilled, LikeFilled} from '@ant-design/icons';\r\n\r\nexport type PostPropsType = {\r\n    id?: number,\r\n    message: string;\r\n    likesCount: number;\r\n    image: string;\r\n}\r\n\r\nconst Post = (props: PostPropsType) => {\r\n\r\n    const [likes, setLikes] = useState<number>(props.likesCount);\r\n    const [dislikes, setDislikes] = useState(0);\r\n    const [action, setAction] = useState<string | null>(null);\r\n\r\n    const like = () => {\r\n        setLikes(1);\r\n        setDislikes(0);\r\n        setAction('liked');\r\n    };\r\n\r\n    const dislike = () => {\r\n        setLikes(0);\r\n        setDislikes(1);\r\n        setAction('disliked');\r\n    };\r\n\r\n    const actions = [\r\n        <Tooltip key=\"comment-basic-like\" title=\"Like\">\r\n      <span onClick={like}>\r\n        {createElement(action === 'liked' ? LikeFilled : LikeOutlined)}\r\n          <span className=\"comment-action\">{likes}</span>\r\n      </span>\r\n        </Tooltip>,\r\n        <Tooltip key=\"comment-basic-dislike\" title=\"Dislike\">\r\n      <span onClick={dislike}>\r\n        {React.createElement(action === 'disliked' ? DislikeFilled : DislikeOutlined)}\r\n          <span className=\"comment-action\">{dislikes}</span>\r\n      </span>\r\n        </Tooltip>,\r\n        <span key=\"comment-basic-reply-to\">Reply to</span>,\r\n    ];\r\n\r\n    return <>\r\n        <Comment\r\n            actions={actions}\r\n            author={<a>Han Solo</a>}\r\n            avatar={<Avatar src={props.image} alt=\"Han Solo\"/>}\r\n            content={\r\n                <p>{props.message}</p>\r\n            }\r\n            datetime={\r\n                <Tooltip title={moment().format('YYYY-MM-DD HH:mm:ss')}>\r\n                    <span>{moment().fromNow()}</span>\r\n                </Tooltip>\r\n            }\r\n        />\r\n    </>\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport s from './MyPosts.module.css';\r\nimport Post, {PostPropsType} from \"./Post/Post\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/formControls/FormControls\";\r\nimport {Button} from \"antd\";\r\n\r\n\r\nexport type PostsPropsType = {\r\n    posts: Array<PostPropsType>\r\n    addPost: (newPostBody: string)=>void\r\n}\r\n\r\nconst MyPosts: React.FC<PostsPropsType> = React.memo((props) => {\r\n\r\n    const postsElement = props.posts.map((p: PostPropsType) => <Post key={p.id} message={p.message} likesCount={p.likesCount}\r\n                                                                   image={p.image}/>)\r\n\r\n    const addNewPost = (values: any) => {\r\n        props.addPost(values.newPostBody)\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <PostFormRedux onSubmit={addNewPost}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n});\r\nexport default MyPosts;\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\nconst PostForm: React.FC<InjectedFormProps> = (props)=> {\r\n    return <form onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea}\r\n                   name ={\"newPostBody\"}\r\n                   placeholder={\"Enter your message\"}\r\n                   validate={[required, maxLength10]}\r\n            />\r\n            <Button>Add post</Button>\r\n    </form>\r\n}\r\n\r\nconst PostFormRedux = reduxForm({\r\n    form: \"PostForm\"\r\n}) (PostForm)","import React from \"react\";\r\nimport {addPostActionCreator} from \"../../../Redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../Redux/redux-store\";\r\nimport {PostPropsType} from \"./Post/Post\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype mapStateToPropsType = {\r\n    posts: Array<PostPropsType>\r\n}\r\nconst mapStateToProps = (state: AppStateType):mapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\ntype mapDispatchToPropsType = {\r\n    addPost: (newPostBody: string)=>void\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch):mapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostBody) => {\r\n            dispatch(addPostActionCreator(newPostBody))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\n\r\nconst Profile = (props: any) => {\r\n    return <div>\r\n        <ProfileInfo isOwner={props.isOwner}\r\n                     profile={props.profile}\r\n                     status={props.status}\r\n                     updateStatus={props.updateStatus}\r\n                     savePhoto={props.savePhoto}\r\n                     saveProfile={props.saveProfile}\r\n        />\r\n        <MyPostsContainer />\r\n    </div>\r\n}\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../Redux/profile-reducer\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\nexport type ProfilePropsType =  {\r\n    aboutMe: string;\r\n    contacts : {\r\n        facebook: string | null,\r\n            website: string | null,\r\n            vk: string | null,\r\n            twitter: string | null,\r\n            instagram: string | null,\r\n            youtube: string | null,\r\n            mainLink: string | null,\r\n            github: string | null,\r\n    },\r\n    fullName: string,\r\n        lookingForAJob: boolean,\r\n        photos: {\r\n        small: string,\r\n            large: string\r\n    }\r\n    userId: number\r\n    lookingForAJobDescription: string\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfilePropsType | null\r\n    status: string\r\n    authorizedUserId: string | null,\r\n    isAuth: boolean,\r\n}\r\n\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: any\r\n}\r\n\r\ntype OwnPropsType = MapStatePropsType & MapDispatchPropsType\r\ntype PropsType = RouteComponentProps<PathParamsType>& OwnPropsType\r\n\r\ntype StateType = {\r\n    userId: string\r\n}\r\n\r\nclass ProfileContainer extends React.Component<PropsType, StateType> {\r\n\r\n    refreshProfile(){\r\n        let userId: string = this.props.match.params.userId\r\n        if (!userId) {\r\n            //@ts-ignore\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n    componentDidUpdate(prevProps:PropsType ) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto = {this.props.savePhoto}\r\n\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    //withAuthRedirect\r\n)(ProfileContainer);\r\n\r\n\r\n"],"sourceRoot":""}
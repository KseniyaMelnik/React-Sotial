{"version":3,"sources":["pages/Chat/ChatPage.tsx"],"names":["TextArea","Input","Chat","useState","wsChannel","setWsChannel","useEffect","ws","closeHandler","setTimeout","createChannel","removeEventListener","close","WebSocket","addEventListener","Messages","AddMessageForm","messages","setMessages","messageHandler","e","newMessages","JSON","parse","data","prevMessages","style","height","overflow","map","m","index","Message","message","width","src","photo","userName","setMessage","ReadyStatus","setReadyStatus","onOpenHandler","rows","placeholder","value","onChange","currentTarget","onClick","send","disabled","ChatPage"],"mappings":"2KAKQA,EAAaC,IAAbD,SAUFE,EAAiB,WAAO,IAAD,EACSC,mBAAyB,MADlC,mBAClBC,EADkB,KACPC,EADO,KAyBxB,OAtBDC,qBAAU,WACN,IAAIC,EACEC,EAAe,WACjBC,WAAWC,EAAe,MAE9B,SAASA,IACFH,IACCA,EAAGI,oBAAoB,QAASH,GAChCD,EAAGK,SAEPL,EAAK,IAAIM,UAAU,gEACnBR,EAAaE,GACbA,EAAGO,iBAAiB,QAASN,GAGjC,OADAE,IACO,WACHH,EAAGI,oBAAoB,QAASH,GAChCD,EAAGK,WAET,IAGM,gCACH,cAACG,EAAD,CAAUX,UAAWA,IACrB,cAACY,EAAD,CAAgBZ,UAAWA,QAI9BW,EAAiD,SAAC,GAAiB,IAAhBX,EAAe,EAAfA,UAAe,EACpCD,mBAA4B,IADQ,mBAC7Dc,EAD6D,KACnDC,EADmD,KAapE,OAXAZ,qBAAU,WACN,IAAMa,EAAiB,SAACC,GACpB,IAAIC,EAAcC,KAAKC,MAAMH,EAAEI,MAC/BN,GAAY,SAACO,GAAD,4BAAqBA,GAArB,YAAsCJ,QAGtD,OADS,OAATjB,QAAS,IAATA,KAAWU,iBAAiB,UAAWK,GAChC,WACM,OAATf,QAAS,IAATA,KAAWO,oBAAoB,UAAWQ,MAEhD,CAACf,IAEI,qBAAKsB,MAAO,CAACC,OAAQ,QAASC,SAAU,QAAxC,SACFX,EAASY,KAAI,SAACC,EAAoBC,GAArB,OAA8B,cAACC,EAAD,CAAqBC,QAASH,GAAhBC,SAG5DC,EAAgD,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnD,OAAO,gCACH,cAAC,IAAD,CAAQC,MAAO,GAAIC,IAAKF,EAAQG,QAD7B,IACuC,4BAAIH,EAAQI,WACtD,uBACCJ,EAAQA,QACT,2BAIHjB,EAAuD,SAAC,GAAiB,IAAhBZ,EAAe,EAAfA,UAAe,EAC5CD,mBAAS,IADmC,mBACnE8B,EADmE,KAC1DK,EAD0D,OAEpCnC,mBAA4B,WAFQ,mBAEnEoC,EAFmE,KAEtDC,EAFsD,KAI1ElC,qBAAU,WACN,IAAMmC,EAAgB,WAClBD,EAAe,UAGnB,OADS,OAATpC,QAAS,IAATA,KAAWU,iBAAiB,OAAQ2B,GAC7B,WACM,OAATrC,QAAS,IAATA,KAAWO,oBAAoB,OAAQ8B,MAE5C,CAACrC,IASJ,OAAO,gCACP,cAACJ,EAAD,CAAU0C,KAAM,EACNC,YAAY,qBACZC,MAAOX,EACPY,SAAU,SAACzB,GAAD,OAAMkB,EAAWlB,EAAE0B,cAAcF,QAC3ClB,MAAO,CAACQ,MAAO,OAErB,cAAC,IAAD,CAAQa,QAdQ,WACXd,IAGI,OAAT7B,QAAS,IAATA,KAAW4C,KAAKf,GAChBK,EAAW,MASmBW,SAAuB,MAAb7C,GAAqC,UAAhBmC,EAA7D,sBAGOW,UA9Fa,WACxB,OAAO,8BACH,cAAChD,EAAD","file":"static/js/7.048b914d.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {Button, Image} from \"antd\";\r\nimport { Input } from 'antd';\r\nimport {ChatMessageType} from \"../../api/chat-api\";\r\n\r\nconst { TextArea } = Input;\r\n\r\n\r\n\r\n const ChatPage: React.FC = () => {\r\n    return <div>\r\n        <Chat />\r\n    </div>\r\n}\r\n\r\nconst Chat: React.FC = () => {\r\n    const [wsChannel, setWsChannel] = useState<WebSocket|null>(null)\r\n\r\n    useEffect(()=>{\r\n        let ws: WebSocket\r\n        const closeHandler = () => {\r\n            setTimeout(createChannel, 3000)\r\n        }\r\n        function createChannel() {\r\n            if(ws){\r\n                ws.removeEventListener('close', closeHandler)\r\n                ws.close()\r\n            }\r\n            ws = new WebSocket(\"wss://social-network.samuraijs.com/handlers/ChatHandler.ashx\")\r\n            setWsChannel(ws)\r\n            ws.addEventListener('close', closeHandler)\r\n        }\r\n        createChannel();\r\n        return ()=> {\r\n            ws.removeEventListener('close', closeHandler)\r\n            ws.close()\r\n        }\r\n    },[])\r\n\r\n\r\n     return <div>\r\n         <Messages wsChannel={wsChannel}/>\r\n         <AddMessageForm wsChannel={wsChannel}/>\r\n     </div>\r\n}\r\n\r\nconst Messages: React.FC<{wsChannel:WebSocket|null}> = ({wsChannel}) => {\r\n    const [messages, setMessages] = useState<ChatMessageType[]>([])\r\n    useEffect(()=>{\r\n        const messageHandler = (e:MessageEvent)=> {\r\n            let newMessages = JSON.parse(e.data)\r\n            setMessages((prevMessages)=> [...prevMessages, ...newMessages])\r\n        }\r\n        wsChannel?.addEventListener('message', messageHandler)\r\n        return ()=> {\r\n            wsChannel?.removeEventListener('message', messageHandler)\r\n        }\r\n    },[wsChannel])\r\n\r\n    return <div style={{height: '400px', overflow: 'auto'}}>\r\n        {messages.map((m: ChatMessageType, index)=> <Message key={index} message={m}/>)}\r\n    </div>\r\n}\r\nconst Message: React.FC<{message: ChatMessageType}> = ({message}) => {\r\n     return <div>\r\n         <Image  width={30} src={message.photo} /> <b>{message.userName}</b>\r\n         <br/>\r\n         {message.message}\r\n         <hr />\r\n     </div>\r\n}\r\n\r\nconst AddMessageForm: React.FC<{wsChannel:WebSocket|null}> = ({wsChannel}) => {\r\n    const [message, setMessage] = useState('')\r\n    const [ReadyStatus, setReadyStatus] = useState<'pending'|'ready'>('pending')\r\n\r\n    useEffect(()=> {\r\n        const onOpenHandler = ()=>{\r\n            setReadyStatus('ready')}\r\n\r\n        wsChannel?.addEventListener('open', onOpenHandler)\r\n        return ()=> {\r\n            wsChannel?.removeEventListener('open', onOpenHandler)\r\n        }\r\n    }, [wsChannel])\r\n\r\n    const sendMessage = () => {\r\n        if (!message) {\r\n            return\r\n        }\r\n        wsChannel?.send(message)\r\n        setMessage('')\r\n    }\r\n    return <div>\r\n    <TextArea rows={2}\r\n              placeholder=\"enter your message\"\r\n              value={message}\r\n              onChange={(e)=> setMessage(e.currentTarget.value)}\r\n              style={{width: 400}}\r\n    />\r\n        <Button onClick={sendMessage} disabled={wsChannel == null || ReadyStatus !== 'ready'}>Send</Button>\r\n    </div>\r\n}\r\nexport default ChatPage"],"sourceRoot":""}
{"version":3,"sources":["components/common/formControls/FormControls.module.css","components/common/formControls/FormControls.tsx","utils/validators/validators.ts","components/login/Login.tsx"],"names":["module","exports","FormControl","input","meta","props","child","hasError","touched","error","className","s","formControl","children","Textarea","restProps","Input","required","value","maxLengthCreator","maxLength","length","LoginReduxForm","reduxForm","form","onSubmit","handleSubmit","placeholder","name","component","validate","type","captchaUrl","src","formSummaryError","connect","state","auth","isAuth","login","to","formData","email","password","rememberMe","captcha"],"mappings":"yFACAA,EAAOC,QAAU,CAAC,YAAc,kCAAkC,MAAQ,4BAA4B,iBAAmB,yC,yJCEnHC,EAAe,SAAC,GAAsC,EAArCC,MAAsC,IAA/BC,EAA8B,EAA9BA,KAAeC,GAAe,EAAzBC,MAAyB,yCAElDC,EAAWH,EAAKI,SAAWJ,EAAKK,MACtC,OACI,sBAAKC,UAAWC,IAAEC,YAAc,KAAOL,EAAUI,IAAEF,MAAQ,IAA3D,UACI,8BACKJ,EAAMQ,WAEVN,GAAY,+BAAOH,EAAKK,YAKxBK,EAAW,SAACT,GAAe,IAC7BF,EAAmCE,EAAnCF,MAAsBY,GAAaV,EAA5BD,KAA4BC,EAAvBC,MADgB,YACOD,EADP,2BAEnC,OAAO,cAACH,EAAD,2BAAiBG,GAAjB,aAAwB,oDAAcF,GAAUY,QAG9CC,EAAQ,SAACX,GAAe,IAC1BF,EAAmCE,EAAnCF,MAAsBY,GAAaV,EAA5BD,KAA4BC,EAAvBC,MADa,YACUD,EADV,2BAEhC,OAAO,cAACH,EAAD,2BAAiBG,GAAjB,aAAwB,iDAAWF,GAAUY,S,iCCtBxD,oEAAO,IAAME,EAAW,SAACC,GACrB,IAAIA,EACJ,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAAoB,SAACF,GACjD,GAAIA,GAASA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,iCCP3C,oGAoDME,EAAiBC,YAAwB,CAC3CC,KAAM,SADaD,EAnCoE,SAAClB,GACxF,OACI,uBAAMoB,SAAUpB,EAAMqB,aAAtB,UACI,8BACI,cAAC,IAAD,CAAOC,YAAa,QACbC,KAAM,QACNC,UAAWb,IACXc,SAAU,CAACb,SAGtB,8BACI,cAAC,IAAD,CAAOU,YAAa,WACbC,KAAM,WACNG,KAAM,WACNF,UAAWb,IACXc,SAAU,CAACb,SAGtB,gCACI,cAAC,IAAD,CAAOc,KAAK,WAAWH,KAAM,cAAeC,UAAWb,MAD3D,kBAGCX,EAAM2B,YAAc,qBAAKC,IAAK5B,EAAM2B,aACpC3B,EAAM2B,YAAc,cAAC,IAAD,CAAOJ,KAAM,UAAWC,UAAWb,IAAOc,SAAU,CAACb,OAEzEZ,EAAMI,OAAS,qBAAKC,UAAWC,IAAEuB,iBAAlB,SACX7B,EAAMI,QAEX,8BACI,mDAwCD0B,uBANS,SAACC,GACrB,MAAO,CACHJ,WAAYI,EAAMC,KAAKL,WACvBM,OAAQF,EAAMC,KAAKC,UAGa,CAACC,WAA1BJ,EA5BD,SAAC9B,GAKX,OAAIA,EAAMiC,OACC,cAAC,IAAD,CAAUE,GAAI,aAEd,gCACH,uCAEA,cAAClB,EAAD,CAAgBG,SAVP,SAACgB,GACdpC,EAAMkC,MAAME,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASI,UASrCb,WAAY3B,EAAM2B","file":"static/js/6.18633ab6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__2DK8S\",\"error\":\"FormControls_error__sGwtC\",\"formSummaryError\":\"FormControls_formSummaryError__1n2jB\"};","import React from \"react\";\r\nimport s from \"./FormControls.module.css\"\r\n\r\nconst FormControl =  ({input, meta,child, ...props}: any)=> {\r\n\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError? s.error : \"\")}>\r\n            <div>\r\n                {props.children}\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props: any)=> {\r\n    const {input, meta,child, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input}{...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input = (props: any)=> {\r\n    const {input, meta,child, ...restProps} = props\r\n    return <FormControl {...props}><input {...input}{...restProps}/></FormControl>\r\n}\r\n\r\n\r\n","\r\nexport const required = (value: any) => {\r\n    if (value) return undefined\r\n    return 'Field is required';\r\n\r\n}\r\nexport const maxLengthCreator = (maxLength: any) => (value: any) => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined;\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../common/formControls/FormControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../Redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport s from \"../common/formControls/FormControls.module.css\"\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType> & {captchaUrl: string | null}> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder={\"Email\"}\r\n                       name={\"email\"}\r\n                       component={Input}\r\n                       validate={[required]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field placeholder={\"password\"}\r\n                       name={\"password\"}\r\n                       type={\"password\"}\r\n                       component={Input}\r\n                       validate={[required]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field type=\"checkbox\" name={\"remember me\"} component={Input}/> remember me\r\n            </div>\r\n            {props.captchaUrl && <img src={props.captchaUrl}/>}\r\n            {props.captchaUrl && <Field name={\"captcha\"} component={Input} validate={[required]}/>}\r\n\r\n            {props.error && <div className={s.formSummaryError}>\r\n                {props.error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n// @ts-ignore\r\nconst LoginReduxForm = reduxForm<FormDataType>({\r\n    form: \"login\"\r\n    // @ts-ignore\r\n})(LoginForm)\r\n\r\nconst Login = (props: any) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    } else {\r\n        return <div>\r\n            <h1>Login</h1>\r\n            { // @ts-ignore\r\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>}\r\n        </div>\r\n    }\r\n\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    captchaUrl: string | null,\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        captchaUrl: state.auth.captchaUrl,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {login})(Login);"],"sourceRoot":""}
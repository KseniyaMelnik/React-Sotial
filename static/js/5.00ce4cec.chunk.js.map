{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWidthHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWidthHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","type","ProfileDataReduxForm","reduxForm","form","onSubmit","handleSubmit","onClick","error","className","s","formSummaryError","Field","name","component","Input","Object","keys","initialValues","contacts","map","key","ProfileData","isOwner","goToEditMode","profile","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","contact","ProfileInfo","Preloader","descriptionBlock","src","photos","large","userPhoto","target","files","savePhoto","formData","saveProfile","then","Post","item","image","message","likesCount","MyPosts","React","memo","postsElement","posts","p","id","postsBlock","PostFormRedux","values","addPost","newPostBody","maxLength10","maxLengthCreator","Textarea","placeholder","validate","required","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/5.00ce4cec.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2HLL7\",\"contact\":\"ProfileInfo_contact__2kVKb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__bD3bY\",\"posts\":\"MyPosts_posts__tuMtb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__14a2C\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusProps = {\r\n    status: string\r\n    updateStatus: (status: string)=> void\r\n}\r\n\r\nexport const ProfileStatusWidthHooks  = (props: ProfileStatusProps) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect (()=>{\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n        return <>\r\n            {!editMode &&\r\n                <div>\r\n                    <b>Status: </b> <span onDoubleClick={activateEditMode}><b>{props.status|| '----'}</b></span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} type=\"text\" value={status}/>\r\n                </div>\r\n            }\r\n        </>\r\n\r\n}","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../../common/formControls/FormControls\";\r\nimport s from \"../../common/formControls/FormControls.module.css\";\r\n\r\n\r\ntype ProfileDataType =  {\r\n    aboutMe: string;\r\n    contacts : {\r\n        facebook: string | null,\r\n        website: string | null,\r\n        vk: string | null,\r\n        twitter: string | null,\r\n        instagram: string | null,\r\n        youtube: string | null,\r\n        mainLink: string | null,\r\n        github: string | null,\r\n    },\r\n    fullName: string,\r\n    lookingForAJob: boolean,\r\n    photos: {\r\n        small: string,\r\n        large: string\r\n    }\r\n    userId: number\r\n    lookingForAJobDescription: string\r\n}\r\n\r\nexport const ProfileDataForm : React.FC<InjectedFormProps<ProfileDataType>> = (props)=> {\r\n\r\n    return  <form onSubmit={props.handleSubmit}>\r\n           <div> <button onClick={()=> {}}>Save</button></div>\r\n        { props.error && <div className={s.formSummaryError}>\r\n            {props.error}\r\n        </div> }\r\n        <div> <b>About me</b> <Field name={\"aboutMe\"} component={Input}/></div>\r\n        <div><b>Full name: </b> <Field name={\"fullName\"} component={Input}/></div>\r\n        <div>\r\n            <div>\r\n                <b>Looking for a job</b> : <Field type=\"checkbox\" name={\"lookingForAJob\"} component={Input}/>\r\n            </div>\r\n            <div><b> My professional skills </b> <Field type=\"text\" name={\"lookingForAJobDescription\"} component={Input}/></div>\r\n\r\n            <div>\r\n\r\n                <b>Contacts: </b> {\r\n                // @ts-ignore\r\n                Object.keys(props.initialValues.contacts).map((key) => {\r\n                return <div key={key}>\r\n                    <b>{key}</b> <Field name={`contacts.${key}`} component={Input}/>\r\n                </div>\r\n            })}\r\n            </div>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nexport const ProfileDataReduxForm = reduxForm<ProfileDataType>({\r\n    form: \"profileData\"\r\n}) (ProfileDataForm)","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport {Preloader} from \"../../common/preloader/Preloader\";\r\nimport {ProfilePropsType} from \"../ProfileContainer\";\r\nimport {ProfileStatusWidthHooks} from \"./ProfileStatusWidthHooks\";\r\nimport userPhoto from \"../../../Assets/Images/avatar.png\"\r\nimport {ProfileDataForm, ProfileDataReduxForm} from \"./ProfileDataForm\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfilePropsType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: any\r\n    saveProfile: any\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoPropsType) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files !== null) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    const onSubmit = (formData: any) => {\r\n        props.saveProfile(formData).then(\r\n            ()=> {\r\n                setEditMode(false)\r\n            }\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile.photos.large || userPhoto}/>\r\n                {props.isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n                {editMode\r\n                    ? <ProfileDataReduxForm initialValues={props.profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData profile={props.profile} status={props.status} updateStatus={props.updateStatus}\r\n                                   isOwner={props.isOwner}\r\n                                   goToEditMode={() => {\r\n                                       setEditMode(true)\r\n                                   }}\r\n                    />}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    goToEditMode: () => void\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    profile: ProfilePropsType\r\n}\r\nconst ProfileData = (props: ProfileDataPropsType) => {\r\n    return (\r\n        <>\r\n            <ProfileStatusWidthHooks status={props.status} updateStatus={props.updateStatus}/>\r\n            {props.isOwner && <div>\r\n                <button onClick={props.goToEditMode}>Edit</button>\r\n            </div>}\r\n            <div><b>Full name: </b>{props.profile.fullName}</div>\r\n            <div>\r\n                <div>\r\n                    <b>Looking for a job</b> : {props.profile.lookingForAJob ? \"yes\" : \"no\"}\r\n                </div>\r\n                {props.profile.lookingForAJob &&\r\n                <div><b> My professional skills </b>{props.profile.lookingForAJobDescription}</div>\r\n                }\r\n                <span>{props.profile.aboutMe}</span>\r\n                <div>\r\n                    <b>Contacts: </b> {Object.keys(props.profile.contacts).map((key) => {\r\n                    // @ts-ignore\r\n                    return <Contact key={key} contactTitle={key} contactValue={props.profile.contacts[key]}/>\r\n                })}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport const Contact: React.FC<ContactPropsType> = ({contactTitle, contactValue}) => {\r\n    return <div className={s.contact}><b>{contactTitle}: </b> {contactValue}</div>\r\n}\r\ntype ContactPropsType = {\r\n    contactTitle: string,\r\n    contactValue: string | null\r\n}\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport s from './Post.module.css';\r\n\r\nexport type PostPropsType = {\r\n    id?: number,\r\n    message: string;\r\n    likesCount: number;\r\n    image: string;\r\n}\r\n\r\nconst Post = (props: PostPropsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src={props.image}/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Post;","import React from \"react\";\r\nimport s from './MyPosts.module.css';\r\nimport Post, {PostPropsType} from \"./Post/Post\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/formControls/FormControls\";\r\n\r\n\r\nexport type PostsPropsType = {\r\n    posts: Array<PostPropsType>\r\n    addPost: (newPostBody: string)=>void\r\n}\r\n\r\nconst MyPosts: React.FC<PostsPropsType> = React.memo((props) => {\r\n\r\n    const postsElement = props.posts.map((p: PostPropsType) => <Post key={p.id} message={p.message} likesCount={p.likesCount}\r\n                                                                   image={p.image}/>)\r\n\r\n    const addNewPost = (values: any) => {\r\n        props.addPost(values.newPostBody)\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <PostFormRedux onSubmit={addNewPost}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n});\r\nexport default MyPosts;\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\nconst PostForm: React.FC<InjectedFormProps> = (props)=> {\r\n    return <form onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea}\r\n                   name ={\"newPostBody\"}\r\n                   placeholder={\"Enter your message\"}\r\n                   validate={[required, maxLength10]}\r\n            />\r\n            <button>Add post</button>\r\n    </form>\r\n}\r\n\r\nconst PostFormRedux = reduxForm({\r\n    form: \"PostForm\"\r\n}) (PostForm)","import React from \"react\";\r\nimport {addPostActionCreator} from \"../../../Redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../Redux/redux-store\";\r\nimport {PostPropsType} from \"./Post/Post\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype mapStateToPropsType = {\r\n    posts: Array<PostPropsType>\r\n}\r\nconst mapStateToProps = (state: AppStateType):mapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\ntype mapDispatchToPropsType = {\r\n    addPost: (newPostBody: string)=>void\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch):mapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostBody) => {\r\n            dispatch(addPostActionCreator(newPostBody))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\n\r\nconst Profile = (props: any) => {\r\n    return <div>\r\n        <ProfileInfo isOwner={props.isOwner}\r\n                     profile={props.profile}\r\n                     status={props.status}\r\n                     updateStatus={props.updateStatus}\r\n                     savePhoto={props.savePhoto}\r\n                     saveProfile={props.saveProfile}\r\n        />\r\n        <MyPostsContainer />\r\n    </div>\r\n}\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../Redux/profile-reducer\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\nexport type ProfilePropsType =  {\r\n    aboutMe: string;\r\n    contacts : {\r\n        facebook: string | null,\r\n            website: string | null,\r\n            vk: string | null,\r\n            twitter: string | null,\r\n            instagram: string | null,\r\n            youtube: string | null,\r\n            mainLink: string | null,\r\n            github: string | null,\r\n    },\r\n    fullName: string,\r\n        lookingForAJob: boolean,\r\n        photos: {\r\n        small: string,\r\n            large: string\r\n    }\r\n    userId: number\r\n    lookingForAJobDescription: string\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfilePropsType | null\r\n    status: string\r\n    authorizedUserId: string | null,\r\n    isAuth: boolean,\r\n}\r\n\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: any\r\n}\r\n\r\ntype OwnPropsType = MapStatePropsType & MapDispatchPropsType\r\ntype PropsType = RouteComponentProps<PathParamsType>& OwnPropsType\r\n\r\ntype StateType = {\r\n    userId: string\r\n}\r\n\r\nclass ProfileContainer extends React.Component<PropsType, StateType> {\r\n\r\n    refreshProfile(){\r\n        let userId: string = this.props.match.params.userId\r\n        if (!userId) {\r\n            //@ts-ignore\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n    componentDidUpdate(prevProps:PropsType ) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto = {this.props.savePhoto}\r\n\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    //withAuthRedirect\r\n)(ProfileContainer);\r\n\r\n\r\n"],"sourceRoot":""}
{"version":3,"sources":["pages/Chat/ChatPage.tsx"],"names":["TextArea","Input","Chat","dispatch","useDispatch","useEffect","startMessagesListening","stopMessagesListening","Messages","AddMessageForm","messages","useSelector","state","chat","style","height","overflow","map","m","index","Message","message","width","src","photo","userName","useState","setMessage","rows","placeholder","value","onChange","e","currentTarget","onClick","sendMessage","disabled","ChatPage"],"mappings":"oLAQQA,EAAaC,IAAbD,SAUFE,EAAiB,WAEnB,IAAMC,EAAWC,cAUhB,OATDC,qBAAU,WAEN,OADAF,EAASG,eACF,WACHH,EAASI,kBAGd,IAGK,gCACH,cAACC,EAAD,IACA,cAACC,EAAD,QAIHD,EAAoB,WACrB,IAAME,EAAWC,aAA6C,SAAAC,GAAK,OAAGA,EAAMC,KAAKH,YAClF,OAAO,qBAAKI,MAAO,CAACC,OAAQ,QAASC,SAAU,QAAxC,SACFN,EAASO,KAAI,SAACC,EAAoBC,GAArB,OAA8B,cAACC,EAAD,CAAqBC,QAASH,GAAhBC,SAG5DC,EAAgD,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnD,OAAO,gCACH,cAAC,IAAD,CAAQC,MAAO,GAAIC,IAAKF,EAAQG,QAD7B,IACuC,4BAAIH,EAAQI,WACtD,uBACCJ,EAAQA,QACT,2BAIHZ,EAA+B,WAAO,IAAD,EACTiB,mBAAS,IADA,mBAChCL,EADgC,KACvBM,EADuB,OAEDD,mBAA4B,WAF3B,mBAGjCvB,GAHiC,UAGtBC,eAQjB,OAAO,gCACP,cAACJ,EAAD,CAAU4B,KAAM,EACNC,YAAY,qBACZC,MAAOT,EACPU,SAAU,SAACC,GAAD,OAAML,EAAWK,EAAEC,cAAcH,QAC3ChB,MAAO,CAACQ,MAAO,OAErB,cAAC,IAAD,CAAQY,QAbe,WAClBb,GAGRlB,EAASgC,YAAYd,KASmBe,UAAU,EAA/C,sBAGOC,UA5Da,WACxB,OAAO,8BACH,cAACnC,EAAD","file":"static/js/8.798d5aa7.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {Button, Image} from \"antd\";\r\nimport { Input } from 'antd';\r\nimport {ChatMessageType} from \"../../api/chat-api\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {sendMessage, startMessagesListening, stopMessagesListening} from \"../../Redux/chat-reducer\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\n\r\nconst { TextArea } = Input;\r\n\r\n\r\n\r\n const ChatPage: React.FC = () => {\r\n    return <div>\r\n        <Chat />\r\n    </div>\r\n}\r\n\r\nconst Chat: React.FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(()=>{\r\n        dispatch(startMessagesListening());\r\n        return () => {\r\n            dispatch(stopMessagesListening());\r\n\r\n        }\r\n    }, [])\r\n\r\n\r\n     return <div>\r\n         <Messages />\r\n         <AddMessageForm />\r\n     </div>\r\n}\r\n\r\nconst Messages: React.FC= () => {\r\n     const messages = useSelector<AppStateType, ChatMessageType[]>(state=> state.chat.messages)\r\n    return <div style={{height: '400px', overflow: 'auto'}}>\r\n        {messages.map((m: ChatMessageType, index)=> <Message key={index} message={m}/>)}\r\n    </div>\r\n}\r\nconst Message: React.FC<{message: ChatMessageType}> = ({message}) => {\r\n     return <div>\r\n         <Image  width={30} src={message.photo} /> <b>{message.userName}</b>\r\n         <br/>\r\n         {message.message}\r\n         <hr />\r\n     </div>\r\n}\r\n\r\nconst AddMessageForm: React.FC<{}> = () => {\r\n    const [message, setMessage] = useState('')\r\n    const [ReadyStatus, setReadyStatus] = useState<'pending'|'ready'>('pending')\r\n    const dispatch = useDispatch()\r\n\r\n    const sendMessageHandler = () => {\r\n        if (!message) {\r\n            return\r\n        }\r\n     dispatch(sendMessage(message))\r\n    }\r\n    return <div>\r\n    <TextArea rows={2}\r\n              placeholder=\"enter your message\"\r\n              value={message}\r\n              onChange={(e)=> setMessage(e.currentTarget.value)}\r\n              style={{width: 400}}\r\n    />\r\n        <Button onClick={sendMessageHandler} disabled={false}>Send</Button>\r\n    </div>\r\n}\r\nexport default ChatPage"],"sourceRoot":""}
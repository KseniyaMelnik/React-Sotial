{"version":3,"sources":["pages/Chat/ChatPage.tsx"],"names":["TextArea","Input","Chat","status","useSelector","state","chat","dispatch","useDispatch","useEffect","startMessagesListening","stopMessagesListening","message","description","type","closable","onClose","e","console","log","Messages","AddMessageForm","messages","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","style","height","overflow","onScroll","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","Message","id","ref","React","memo","width","src","photo","userName","setMessage","rows","placeholder","value","onChange","onClick","sendMessage","disabled","ChatPage"],"mappings":"sMAaQA,EAAaC,IAAbD,SAUFE,EAAiB,WACnB,IAAMC,EAASC,aAAsC,SAAAC,GAAK,OAAGA,EAAMC,KAAKH,UAClEI,EAAWC,cAajB,OAPAC,qBAAU,WAEN,OADAF,EAASG,eACF,WACHH,EAASI,kBAEd,IAEI,gCACS,UAAXR,GAAsB,cAAC,IAAD,CACnBS,QAAQ,+CACRC,YAAY,8GACZC,KAAK,QACLC,UAAQ,EACRC,QAjBQ,SAACC,GACbC,QAAQC,IAAIF,EAAG,oBAkBf,qCACI,cAACG,EAAD,IACA,cAACC,EAAD,WAMND,EAAoB,WACtB,IAAME,EAAWlB,aAA6C,SAAAC,GAAK,OAAGA,EAAMC,KAAKgB,YAC3EC,EAAoBC,iBAAuB,MAFrB,EAGYC,oBAAS,GAHrB,mBAGrBC,EAHqB,KAGPC,EAHO,KAmB5B,OANAlB,qBAAU,WACa,IAAD,EAAdiB,IACA,UAAAH,EAAkBK,eAAlB,SAA2BC,eAAe,CAACC,SAAU,cAE1D,CAACR,IAEG,sBAAKS,MAAO,CAACC,OAAQ,QAASC,SAAU,QAASC,SAflC,SAACjB,GACnB,IAAIkB,EAAUlB,EAAEmB,cACbC,KAAKC,IAAIH,EAAQI,aAAeJ,EAAQK,UAAYL,EAAQM,cAAgB,KAC3Ef,GAAgBC,GAAgB,GAEhCD,GAAgBC,GAAgB,IAUjC,UACFL,EAASoB,KAAI,SAACC,GAAD,OAAuB,cAACC,EAAD,CAAoBhC,QAAS+B,GAAfA,EAAEE,OACrD,qBAAKC,IAAKvB,QAGZqB,EAAgDG,IAAMC,MAAK,YAAgB,IAAdpC,EAAa,EAAbA,QAE9D,OAAO,gCACH,cAAC,IAAD,CAAQqC,MAAO,GAAIC,IAAKtC,EAAQuC,QAD7B,IACuC,4BAAIvC,EAAQwC,WACtD,uBACCxC,EAAQA,QACT,6BAIHS,EAA+B,WAAO,IAAD,EACTI,mBAAS,IADA,mBAChCb,EADgC,KACvByC,EADuB,KAEjClD,EAASC,aAAsC,SAAAC,GAAK,OAAGA,EAAMC,KAAKH,UAClEI,EAAWC,cASjB,OAAO,gCACP,cAACR,EAAD,CAAUsD,KAAM,EACNC,YAAY,qBACZC,MAAO5C,EACP6C,SAAU,SAACxC,GAAD,OAAMoC,EAAWpC,EAAEmB,cAAcoB,QAC3CzB,MAAO,CAACkB,MAAO,OAErB,cAAC,IAAD,CAAQS,QAde,WAClB9C,IAGRL,EAASoD,YAAY/C,IAClByC,EAAW,MAS0BO,SAAqB,UAAXzD,EAA/C,sBAGO0D,UA7Fa,WACvB,OAAO,8BACJ,cAAC3D,EAAD","file":"static/js/8.ba2b0fd3.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from \"react\";\r\nimport {Button, Image} from \"antd\";\r\nimport { Alert, Input } from 'antd';\r\n\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    ChatMessageType,\r\n    sendMessage,\r\n    startMessagesListening,\r\n    StatusType,\r\n    stopMessagesListening\r\n} from \"../../Redux/chat-reducer\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nconst { TextArea } = Input;\r\n\r\n\r\n\r\n const ChatPage: React.FC = () => {\r\n     return <div>\r\n        <Chat />\r\n    </div>\r\n}\r\n\r\nconst Chat: React.FC = () => {\r\n    const status = useSelector<AppStateType, StatusType>(state=> state.chat.status)\r\n    const dispatch = useDispatch()\r\n\r\n    const onClose = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        console.log(e, 'I was closed.');\r\n    };\r\n\r\n    useEffect(()=>{\r\n        dispatch(startMessagesListening());\r\n        return () => {\r\n            dispatch(stopMessagesListening());\r\n        }\r\n    }, [])\r\n\r\n    return <div>\r\n        {status === 'error' && <Alert\r\n            message=\"Some error occurred. Please refresh the page\"\r\n            description=\"Error Description Error Description Error Description Error Description Error Description Error Description\"\r\n            type=\"error\"\r\n            closable\r\n            onClose={onClose}\r\n        />}\r\n        <>\r\n            <Messages/>\r\n            <AddMessageForm/>\r\n        </>\r\n\r\n    </div>\r\n}\r\n\r\nconst Messages: React.FC= () => {\r\n    const messages = useSelector<AppStateType, ChatMessageType[]>(state=> state.chat.messages)\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null);\r\n    const [isAutoScroll, setIsAutoScroll] = useState(true)\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        let element = e.currentTarget\r\n        if(Math.abs(element.scrollHeight - element.scrollTop - element.clientHeight) < 300){\r\n           !isAutoScroll && setIsAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    useEffect(()=> {\r\n        if (isAutoScroll) {\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n        }\r\n    }, [messages])\r\n\r\n    return <div style={{height: '400px', overflow: 'auto'}} onScroll={scrollHandler}>\r\n        {messages.map((m: ChatMessageType)=> <Message key={m.id} message={m}/>)}\r\n        <div ref={messagesAnchorRef}></div>\r\n    </div>\r\n}\r\nconst Message: React.FC<{message: ChatMessageType}> = React.memo(({message}) => {\r\n\r\n     return <div>\r\n         <Image  width={30} src={message.photo} /> <b>{message.userName}</b>\r\n         <br/>\r\n         {message.message}\r\n         <hr />\r\n     </div>\r\n})\r\n\r\nconst AddMessageForm: React.FC<{}> = () => {\r\n    const [message, setMessage] = useState('')\r\n    const status = useSelector<AppStateType, StatusType>(state=> state.chat.status)\r\n    const dispatch = useDispatch()\r\n\r\n    const sendMessageHandler = () => {\r\n        if (!message) {\r\n            return\r\n        }\r\n     dispatch(sendMessage(message))\r\n        setMessage('')\r\n    }\r\n    return <div>\r\n    <TextArea rows={2}\r\n              placeholder=\"enter your message\"\r\n              value={message}\r\n              onChange={(e)=> setMessage(e.currentTarget.value)}\r\n              style={{width: 400}}\r\n    />\r\n        <Button onClick={sendMessageHandler} disabled={status !== 'ready'}>Send</Button>\r\n    </div>\r\n}\r\nexport default ChatPage"],"sourceRoot":""}
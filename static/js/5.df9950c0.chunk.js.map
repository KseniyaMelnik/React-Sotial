{"version":3,"sources":["components/common/formControls/FormControls.module.css","components/common/formControls/FormControls.tsx","utils/validators/validators.ts","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWidthHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","FormControl","input","meta","props","child","hasError","touched","error","className","s","formControl","children","Textarea","restProps","Input","required","value","maxLengthCreator","maxLength","length","ProfileStatusWidthHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","autoFocus","onBlur","updateStatus","type","ProfileInfo","profile","descriptionBlock","src","photos","large","userPhoto","fullName","lookingForAJobDescription","aboutMe","contacts","facebook","github","instagram","mainLink","twitter","vk","website","youtube","Preloader","Post","item","image","message","likesCount","MyPosts","React","memo","postsElement","posts","map","p","postsBlock","PostFormRedux","onSubmit","values","addPost","newPostBody","maxLength10","reduxForm","form","handleSubmit","Field","component","name","placeholder","validate","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/5.df9950c0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__2DK8S\",\"error\":\"FormControls_error__sGwtC\",\"formSummaryError\":\"FormControls_formSummaryError__1n2jB\"};","import React from \"react\";\r\nimport s from \"./FormControls.module.css\"\r\n\r\nconst FormControl =  ({input, meta,child, ...props}: any)=> {\r\n\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError? s.error : \"\")}>\r\n            <div>\r\n                {props.children}\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props: any)=> {\r\n    const {input, meta,child, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input}{...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input = (props: any)=> {\r\n    const {input, meta,child, ...restProps} = props\r\n    return <FormControl {...props}><input {...input}{...restProps}/></FormControl>\r\n}\r\n\r\n\r\n","\r\nexport const required = (value: any) => {\r\n    if (value) return undefined\r\n    return 'Field is required';\r\n\r\n}\r\nexport const maxLengthCreator = (maxLength: any) => (value: any) => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined;\r\n}\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2HLL7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__bD3bY\",\"posts\":\"MyPosts_posts__tuMtb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__14a2C\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusProps = {\r\n    status: string\r\n    updateStatus: (status: string)=> void\r\n}\r\n\r\nexport const ProfileStatusWidthHooks  = (props: ProfileStatusProps) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect (()=>{\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n        return <>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}><b>{props.status|| '----'}</b></span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} type=\"text\" value={status}/>\r\n                </div>\r\n            }\r\n        </>\r\n\r\n}","import React from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport {Preloader} from \"../../common/preloader/Preloader\";\r\nimport {ProfilePropsType} from \"../ProfileContainer\";\r\nimport {ProfileStatusWidthHooks} from \"./ProfileStatusWidthHooks\";\r\nimport userPhoto from \"../../../Assets/Images/avatar.png\"\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfilePropsType\r\n    status: string\r\n    updateStatus: (status: string)=> void\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoPropsType) => {\r\n    if (!props.profile) {\r\n        return <Preloader />\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile.photos.large || userPhoto}/>\r\n                <ProfileStatusWidthHooks status = {props.status} updateStatus={props.updateStatus}/>\r\n                <div>{props.profile.fullName}</div>\r\n                <div>{props.profile.lookingForAJobDescription}</div>\r\n                <span>{props.profile.aboutMe}</span>\r\n                <div>\r\n                    <ul>\r\n                        <li><a>{props.profile.contacts.facebook}</a></li>\r\n                        <li><a>{props.profile.contacts.github}</a></li>\r\n                        <li><a>{props.profile.contacts.instagram}</a></li>\r\n                        <li><a>{props.profile.contacts.mainLink}</a></li>\r\n                        <li><a>{props.profile.contacts.twitter}</a></li>\r\n                        <li><a>{props.profile.contacts.vk}</a></li>\r\n                        <li><a>{props.profile.contacts.website}</a></li>\r\n                        <li><a>{props.profile.contacts.youtube}</a></li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport s from './Post.module.css';\r\n\r\nexport type PostPropsType = {\r\n    id?: number,\r\n    message: string;\r\n    likesCount: number;\r\n    image: string;\r\n}\r\n\r\nconst Post = (props: PostPropsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src={props.image}/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Post;","import React from \"react\";\r\nimport s from './MyPosts.module.css';\r\nimport Post, {PostPropsType} from \"./Post/Post\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/formControls/FormControls\";\r\n\r\n\r\nexport type PostsPropsType = {\r\n    posts: Array<PostPropsType>\r\n    addPost: (newPostBody: string)=>void\r\n}\r\n\r\nconst MyPosts: React.FC<PostsPropsType> = React.memo((props) => {\r\n\r\n    const postsElement = props.posts.map((p: PostPropsType) => <Post message={p.message} likesCount={p.likesCount}\r\n                                                                   image={p.image}/>)\r\n\r\n    const addNewPost = (values: any) => {\r\n        props.addPost(values.newPostBody)\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <PostFormRedux onSubmit={addNewPost}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n});\r\nexport default MyPosts;\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\nconst PostForm: React.FC<InjectedFormProps> = (props)=> {\r\n    return <form onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea}\r\n                   name ={\"newPostBody\"}\r\n                   placeholder={\"Enter your message\"}\r\n                   validate={[required, maxLength10]}\r\n            />\r\n            <button>Add post</button>\r\n    </form>\r\n}\r\n\r\nconst PostFormRedux = reduxForm({\r\n    form: \"PostForm\"\r\n}) (PostForm)","import React from \"react\";\r\nimport {addPostActionCreator} from \"../../../Redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../Redux/redux-store\";\r\nimport {PostPropsType} from \"./Post/Post\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype mapStateToPropsType = {\r\n    posts: Array<PostPropsType>\r\n}\r\nconst mapStateToProps = (state: AppStateType):mapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\ntype mapDispatchToPropsType = {\r\n    addPost: (newPostBody: string)=>void\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch):mapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostBody) => {\r\n            dispatch(addPostActionCreator(newPostBody))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\n\r\nconst Profile = (props: any) => {\r\n    return <div>\r\n        <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n        <MyPostsContainer />\r\n    </div>\r\n}\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, updateStatus} from \"../../Redux/profile-reducer\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\nexport type ProfilePropsType =  {\r\n    aboutMe: string;\r\n    contacts : {\r\n        facebook: string | null,\r\n            website: string | null,\r\n            vk: string | null,\r\n            twitter: string | null,\r\n            instagram: string | null,\r\n            youtube: string | null,\r\n            mainLink: string | null,\r\n            github: string | null,\r\n    },\r\n    fullName: string,\r\n        lookingForAJob: boolean,\r\n        photos: {\r\n        small: string,\r\n            large: string\r\n    }\r\n    userId: number\r\n    lookingForAJobDescription: string\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfilePropsType | null\r\n    status: string\r\n    authorizedUserId: string | null,\r\n    isAuth: boolean,\r\n}\r\n\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\ntype OwnPropsType = MapStatePropsType & MapDispatchPropsType\r\ntype PropsType = RouteComponentProps<PathParamsType>& OwnPropsType\r\n\r\ntype StateType = {\r\n    userId: string\r\n}\r\n\r\nclass ProfileContainer extends React.Component<PropsType, StateType> {\r\n\r\n    refreshProfile(){\r\n        let userId: string = this.props.match.params.userId\r\n        if (!userId) {\r\n            //@ts-ignore\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n    componentDidUpdate(prevProps:PropsType ) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus}/>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n    //withAuthRedirect\r\n)(ProfileContainer);\r\n\r\n\r\n"],"sourceRoot":""}